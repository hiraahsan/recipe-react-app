{"version":3,"sources":["components/SearchBar.js","components/DisplayResults.js","components/utils.js","components/Dashboard.js","components/Navigation.js","components/About.js","components/Steps.js","components/SingleRecipe.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","inputValue","userInput","handleSubmit","onSubmit","e","action","onChange","value","type","className","DisplayResults","props","data","useState","setId","length","map","item","to","pathname","id","state","image","title","usedIngredients","missedIngredients","onClick","src","alt","element","name","apiKey","Dashboard","setInputValue","ingredient","setIngredient","isLoading","setIsLoading","setData","url","setUrl","error","setError","useEffect","a","fetch","then","response","text","result","items","JSON","parse","console","log","alert","fetchData","preventDefault","target","Navigation","About","Steps","steps","SingleRecipe","instructions","setInstructions","ingredients","setIngredients","match","location","params","i","j","step","amount","unit","App","basename","path","component","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ce0bf3be.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBar = ({inputValue, userInput, handleSubmit}) => {     \r\n\r\n    return(\r\n        <form \r\n        onSubmit={(e) => handleSubmit(e)} \r\n        action=\"search-recipes\">\r\n            <input onChange={userInput} value={inputValue} type=\"text\"/>\r\n            <input className=\"search-bar\" type=\"submit\" value=\"Search\"/>\r\n       </form>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst DisplayResults = (props) => {\r\n    const {data} = props\r\n    const [id, setId] = useState('');\r\n    // display the data received from api call, if there is at least 1 result received\r\n    return(\r\n\r\n        <div className={data.length > 0 ? \"display-results\" : \"\"}>\r\n            {\r\n            data.length > 0\r\n            ? \r\n            data.map((item) => {\r\n                // sending props for individual page recipes\r\n            return             <Link to={{\r\n\r\n            pathname:`/recipes/${item.id}`,\r\n            state: {\r\n                image: item.image,\r\n                title: item.title,\r\n                usedIngredients: item.usedIngredients,\r\n                missedIngredients: item.missedIngredients\r\n            }\r\n            }}>\r\n            <button className=\"recipe-results\" onClick={() => setId(item.id)}>\r\n\r\n            <img src={item.image} alt={item.title} /> <h2>{item.title}</h2> \r\n            <p>Missed ingredients: {item.missedIngredients.map(element => {\r\n                return element.name + ' '\r\n                })}</p>\r\n        </button>\r\n        </Link>\r\n        })\r\n            :\r\n            <p>No data yet</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default DisplayResults;","export const apiKey = '72a819a56a534035a421ce5497089e8a';","import React, {useState, useEffect} from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport DisplayResults from './DisplayResults';\r\nimport {apiKey} from './utils';\r\n\r\n\r\nconst Dashboard = () => {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [ingredient, setIngredient] = useState('');\r\n    const userInput = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [data, setData] = useState('')\r\n    const [url, setUrl] = useState(null)\r\n    const [error, setError] = useState('')\r\n\r\n    // set input value on submission of form\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        inputValue ? setIngredient(inputValue) : alert('type something in first')\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUrl(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredient}&apiKey=${apiKey}`)\r\n\r\n    }, [ingredient])\r\n\r\n    // api call fetching ingredients\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          setIsLoading(true)\r\n\r\n          try {\r\n            await fetch(url)\r\n            .then(response => response.text())\r\n            .then((result) => {\r\n              const items = JSON.parse(result);\r\n              console.log(items)\r\n              setData(items);\r\n              setIsLoading(false);\r\n              setUrl('');\r\n              \r\n    \r\n            })        \r\n          } catch (err) {\r\n            console.log(err)\r\n            setError(err);\r\n            alert(error)\r\n            setIsLoading(false)\r\n          }\r\n        };\r\n        if (url) {\r\n            fetchData();\r\n        }\r\n      }, [url]);\r\n    \r\n    \r\n\r\n\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <SearchBar handleSubmit={handleSubmit} inputValue={inputValue} userInput = {userInput}/>\r\n            {\r\n            isLoading \r\n            ?\r\n            <p>Loading...</p> : \r\n            // goes over data and publishes the information on page\r\n            <DisplayResults isLoading={isLoading} data={data} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n    return(\r\n        <div className=\"nav-bar\">\r\n            <NavLink to=\"/\">Home</NavLink>\r\n            <NavLink to=\"/about\">About</NavLink>\r\n            <NavLink to=\"/contact\">Contact</NavLink>\r\n            <NavLink to=\"/login\">Login</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return(\r\n        <div>This is about me</div>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { useEffect, useState } from 'react';\r\n\r\nconst Steps = (props) => {\r\n    const {steps} = props\r\n    const [instructions, setInstructions] = useState([]);\r\n    // useEffect(() => {\r\n    //     for(let i=0; i<steps.length; i++) {\r\n    //         console.log(steps[i])\r\n    //         for(let j=0; j<steps[i].length; j++) {\r\n    //             console.log(steps[i][j])\r\n    //             setInstructions(instructions => [...instructions, steps[i][j].step])\r\n    //         }\r\n    //     }\r\n    // }, [steps])\r\n    return(\r\n        <>\r\n        <p>These are the steps</p>\r\n        {steps}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Steps;","import React, {useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {apiKey} from './utils';\r\nimport Steps from './Steps';\r\n\r\nconst SingleRecipe = (props) => {\r\n    const [id, setId] = useState('')\r\n    const [url, setUrl] = useState('')\r\n    const [data, setData] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [instructions, setInstructions] = useState([]);\r\n    const [ingredients, setIngredients] = useState();\r\n\r\n    const {match, location} = props\r\n    const {state} = location\r\n\r\n \r\n\r\n\r\n    useEffect(() => {\r\n        setId(match.params.id)\r\n      setUrl(`https://api.spoonacular.com/recipes/${id}/analyzedInstructions?apiKey=${apiKey}`)\r\n    }, [match.params.id, id])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n            const fetchData = async () => {\r\n    \r\n              try {\r\n                await fetch(url)\r\n                .then(response => response.text())\r\n                .then((result) => {\r\n                  const items = JSON.parse(result);\r\n                  console.log(items)\r\n                  setData(items);\r\n                  setUrl('');\r\n                  setIsLoading(false);\r\n                  \r\n        \r\n                })        \r\n              } catch (error) {\r\n                console.log(error)\r\n              }\r\n            };\r\n            if (url) {\r\n                fetchData();\r\n            }\r\n          }, [url]);\r\n\r\n          useEffect( () => {\r\n            if (data) {\r\n              // go over data and save the steps in state\r\n                for(let i = 0; i < data.length; i++) {\r\n                    const steps = data[i].steps\r\n                    for (let j=0; j<steps.length; j++) {\r\n                        setInstructions(instructions => [instructions, <li>{`${j + 1}. ` + steps[j].step}</li> ])\r\n                    }\r\n                }\r\n            } else if(!isLoading && (!data)) {\r\n              alert('Sorry! The steps are not available for this recipe at the moment. Please search for another one.')\r\n            }\r\n        }, [data, isLoading])\r\n\r\n\r\n        useEffect( () => {\r\n          const usedIngredients = state.usedIngredients\r\n          for (let i = 0; i < usedIngredients.length; i++) {\r\n            const {amount, unit, name} = usedIngredients[i]\r\n          setIngredients(ingredients => [ingredients, <li>{amount + ' ' + (unit ? unit : ' ') + name}</li>])\r\n          }\r\n\r\n          const missedIngredients = state.missedIngredients;\r\n          for (let i = 0; i < missedIngredients.length; i++) {\r\n            console.log(missedIngredients[i])\r\n            const {amount, unit, name} = missedIngredients[i]\r\n          setIngredients(ingredients => [ingredients, <li>{(amount ? amount : '') + ' ' + (unit ? unit + ' ' : '') + name}</li>])\r\n          // setting conditional statements for units and amounts\r\n          }\r\n        }, [state.usedIngredients, state.missedIngredients])\r\n\r\n    return(\r\n        <div className=\"wrapper recipe-page\">\r\n          {\r\n            isLoading\r\n            ? \r\n            <p>The recipe is loading...</p>\r\n            :\r\n            <div>\r\n        <h2>{state.title}</h2>\r\n        <img src={state.image} alt={state.title}/>\r\n        <div className=\"ingredients\">\r\n          <h3>Ingredients</h3>\r\n          {ingredients}\r\n        </div>\r\n        <p>This will be a single recipe page</p>\r\n        <Steps steps={instructions} />\r\n        <Link to=\"/\">Go Home</Link>\r\n        </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleRecipe;","import React from 'react';\nimport Dashboard from './components/Dashboard';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Navigation from './components/Navigation';\nimport About from './components/About';\nimport SingleRecipe from './components/SingleRecipe';\n// import LoginPage from './components/LoginPage';\nimport './styles/App.scss';\n\n\nfunction App() {\n\n  return (\n    <Router basename=\"recipe-react-app\">\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" component={Dashboard} exact/>\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/recipes/:id\" component={SingleRecipe} />\n        <Route path=\"/login\" \n        // component={LoginPage} \n        // render={props => <LoginPage {...props} />}\n        />\n\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}